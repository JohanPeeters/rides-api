AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    ride sharing

    SAM Template for rides-api

Globals:
    Function:
        Timeout: 3


Resources:

    CreateRideFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ride_sharing/
        Handler: create.lambdaHandler
        Runtime: nodejs8.10
        Policies:
          DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
        Environment:
          Variables:
            TABLE_NAME: !Ref RidesTable

    ListRidesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: list.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    ReadRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: read.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    UpdateRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: update.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    DeleteRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: delete.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    OptionsFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: options.lambdaHandler
            Runtime: nodejs8.10

    RidesTable:
        Type: AWS::Serverless::SimpleTable

    RideSharingApi:
      Type: AWS::ApiGateway::RestApi
      Description: Backend ride sharing API generated with CloudFormation
      Properties:
        ApiKeySourceType: HEADER
        Name: Ride sharing API

    ProdStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId: !Ref Deployment
        RestApiId: !Ref RideSharingApi
        StageName: prod
        MethodSettings:
          - HttpMethod: '*'
            ResourcePath: /*
            LoggingLevel: INFO

    InvokeListFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref ListRidesFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RideSharingApi}/*

    InvokeCreateFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref CreateRideFunction
        Principal: apigateway.amazonaws.com
        # SourceArn:
        #   Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RideSharingApi}


    InvokeReadFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref ReadRideFunction
        Principal: apigateway.amazonaws.com
        # SourceArn:
        #   Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RideSharingApi}


    InvokeUpdateFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref UpdateRideFunction
        Principal: apigateway.amazonaws.com
        # SourceArn:
        #   Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RideSharingApi}


    InvokeDeleteFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref DeleteRideFunction
        Principal: apigateway.amazonaws.com
        # SourceArn:
        #   Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RideSharingApi}

    # InvokeOptionsFunctionPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     Action: lambda:InvokeFunction
    #     FunctionName: !Ref OptionsFunction
    #     Principal: apigateway.amazonaws.com

    ApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ride-sharing
        Enabled: true
        StageKeys:
          - RestApiId: !Ref RideSharingApi
            StageName: !Ref ProdStage

    UsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: rides
        Throttle:
          BurstLimit: 20
          RateLimit: 10
        ApiStages:
          - ApiId: !Ref RideSharingApi
            Stage: !Ref ProdStage

    UsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId: !Ref ApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref UsagePlan

    AuthZSrv:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: riders

    TestClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: test-client
        GenerateSecret: true
        UserPoolId: !Ref AuthZSrv

    Guard:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref RideSharingApi
        ProviderARNs:
          - !GetAtt AuthZSrv.Arn
        Name: Guard
        IdentitySource: method.request.header.Authorization

    RidesCollection:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt RideSharingApi.RootResourceId
        PathPart: rides
        RestApiId: !Ref RideSharingApi

    Ride:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref RidesCollection
        PathPart: '{rideID}'
        RestApiId: !Ref RideSharingApi

    ListMethod:
      Type: AWS::ApiGateway::Method
      DependsOn: InvokeListFunctionPermission
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListRidesFunction.Arn}/invocations
          IntegrationResponses:
            - StatusCode: 200
              # ResponseParameters:
              #   method.response.header.Access-Control-Allow-Origin: integration.response.header.Access-Control-Allow-Origin
        MethodResponses:
          - StatusCode: 200
            # ResponseParameters:
            #   method.response.header.Access-Control-Allow-Origin: true
            # ResponseModels:
            #   application/json: Empty
            ResponseModels:
              application/json: Empty
        ResourceId: !Ref RidesCollection
        RestApiId: !Ref RideSharingApi

    CreateMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/create
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRideFunction.Arn}/invocations
          IntegrationResponses:
            - StatusCode: 200
              # ResponseParameters:
              #   method.response.header.Access-Control-Allow-Origin: integration.response.body.header.Access-Control-Allow-Origin
          PassthroughBehavior: WHEN_NO_MATCH
        MethodResponses:
          - StatusCode: 200
            # ResponseParameters:
            #   method.response.header.Access-Control-Allow-Origin: true
            ResponseModels:
              application/json: Empty
        ResourceId: !Ref RidesCollection
        RestApiId: !Ref RideSharingApi

    # CollectionOptionsMethod:
    #   Type: AWS::ApiGateway::Method
    #   Properties:
    #     ApiKeyRequired: false
    #     RestApiId: !Ref RideSharingApi
    #     ResourceId: !Ref RidesCollection
    #     HttpMethod: OPTIONS
    #     AuthorizationType: NONE
    #     Integration:
    #       Type: AWS_PROXY
    #       IntegrationHttpMethod: POST
    #       Uri:
    #         Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsFunction.Arn}/invocations
    #       IntegrationResponses:
    #         - StatusCode: 200
    #           ResponseParameters:
    #             method.response.header.Access-Control-Allow-Headers: "integration.response.body.header.Access-Control-Allow-Headers"
    #             method.response.header.Access-Control-Allow-Origin: "integration.response.body.header.Access-Control-Allow-Origin"
    #             method.response.header.Access-Control-Allow-Methods: "integration.response.body.header.Access-Control-Allow-Methods"
    #           ResponseTemplates:
    #             application/json: '{"statusCode": "200"}'
    #       PassthroughBehavior: WHEN_NO_MATCH
    #     MethodResponses:
    #       - StatusCode: 200
    #         ResponseParameters:
    #           method.response.header.Access-Control-Allow-Headers: true
    #           method.response.header.Access-Control-Allow-Origin: true
    #           method.response.header.Access-Control-Allow-Methods: true
    #         ResponseModels:
    #           application/json: Empty


    ReadMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadRideFunction.Arn}/invocations
          IntegrationResponses:
            - StatusCode: 200
              # ResponseParameters:
              #   method.response.header.Access-Control-Allow-Origin: integration.response.body.header.Access-Control-Allow-Origin
        MethodResponses:
          - StatusCode: 200
            # ResponseParameters:
              # method.response.header.Access-Control-Allow-Origin: true
            ResponseModels:
              application/json: Empty
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    UpdateMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/update
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: PUT
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRideFunction.Arn}/invocations
          IntegrationResponses:
            - StatusCode: 200
            - StatusCode: 403
              # ResponseParameters:
              #   method.response.header.Access-Control-Allow-Origin: integration.response.body.header.Access-Control-Allow-Origin
        MethodResponses:
          - StatusCode: 200
            # ResponseParameters:
            #   method.response.header.Access-Control-Allow-Origin: true
            ResponseModels:
              application/json: Empty
          - StatusCode: 403
            ResponseModels:
              application/json: Empty
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    DeleteMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/delete
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: DELETE
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRideFunction.Arn}/invocations
          IntegrationResponses:
            - StatusCode: 200
            - StatusCode: 403
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: Empty
          - StatusCode: 403
            ResponseModels:
              application/json: Empty
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    # RideOptionsMethod:
    #   Type: AWS::ApiGateway::Method
    #   Properties:
    #     ApiKeyRequired: false
    #     RestApiId: !Ref RideSharingApi
    #     ResourceId: !Ref Ride
    #     HttpMethod: OPTIONS
    #     AuthorizationType: NONE
    #     Integration:
    #       Type: AWS_PROXY
    #       IntegrationHttpMethod: POST
    #       Uri:
    #         Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsFunction.Arn}/invocations
    #   Type: AWS::ApiGateway::Method
    #   Properties:
    #     ApiKeyRequired: false
    #     RestApiId: !Ref RideSharingApi
    #     ResourceId: !Ref Ride
    #     HttpMethod: OPTIONS
    #     AuthorizationType: NONE
    #     RequestParameters:
    #       method.request.header.Access-Control-Request-Headers: true
    #       method.request.header.Origin: true
    #       method.request.header.Access-Control-Request-Method: true
    #     Integration:
    #       Type: MOCK
    #       RequestParameters:
    #         integration.request.header.Access-Control-Request-Headers: method.request.header.Access-Control-Request-Headers
    #         integration.request.header.Origin: method.request.header.Origin
    #         integration.request.header.Access-Control-Request-Method: method.request.header.Access-Control-Request-Method
    #       IntegrationResponses:
    #         - StatusCode: 200
    #           ResponseParameters:
    #             method.response.header.Access-Control-Allow-Headers: integration.response.header.Access-Control-Request-Headers
    #             method.response.header.Access-Control-Allow-Origin: integration.response.header.Origin
    #             method.response.header.Access-Control-Allow-Methods: integration.response.header.Access-Control-Request-Method
    #       PassthroughBehavior: WHEN_NO_MATCH
    #     MethodResponses:
    #       - StatusCode: 200
    #         ResponseParameters:
    #           method.response.header.Access-Control-Allow-Headers: true
    #           method.response.header.Access-Control-Allow-Origin: true
    #           method.response.header.Access-Control-Allow-Methods: true

    Deployment:
      DependsOn:
        - CreateMethod
        - ListMethod
        - ReadMethod
        - UpdateMethod
        - DeleteMethod
    #    - CollectionOptionsMethod
    #    - RideOptionsMethod
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref RideSharingApi
