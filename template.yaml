AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    rides-api

    SAM Template for rides-api

Globals:
    Function:
        Timeout: 3


Resources:

    CreateRideFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ride_sharing/
        Handler: create.lambdaHandler
        Runtime: nodejs8.10
        Policies:
          DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
        Environment:
          Variables:
            TABLE_NAME: !Ref RidesTable

    ListRidesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: list.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    ReadRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: read.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable


    UpdateRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: update.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    DeleteRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: delete.lambdaHandler
            Runtime: nodejs8.10
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    RidesTable:
        Type: AWS::Serverless::SimpleTable

    RideSharingApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        ApiKeySourceType: HEADER
        Name: Ride sharing API

    ProdStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId: !Ref Deployment
        RestApiId: !Ref RideSharingApi
        StageName: prod

    ApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ride-sharing
        Enabled: true
        StageKeys:
          - RestApiId: !Ref RideSharingApi
            StageName: prod

    UsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        ApiStages:
          - ApiId: !Ref RideSharingApi
            Stage: !Ref ProdStage
        UsagePlanName: rides
        Throttle:
          BurstLimit: 20
          RateLimit: 10

    UsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId: !Ref ApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref UsagePlan

    AuthZSrv:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: riders

    TestClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: test-client
        GenerateSecret: true
        UserPoolId: !Ref AuthZSrv

    Guard:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref RideSharingApi
        ProviderARNs:
          - !GetAtt AuthZSrv.Arn
        Name: Guard
        IdentitySource: method.request.header.Authorization

    RidesCollection:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt RideSharingApi.RootResourceId
        PathPart: rides
        RestApiId: !Ref RideSharingApi

    Ride:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref RidesCollection
        PathPart: '{rideID}'
        RestApiId: !Ref RideSharingApi

    ListMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListRidesFunction.Arn}/invocations
        ResourceId: !Ref RidesCollection
        RestApiId: !Ref RideSharingApi

    CreateMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/create
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRideFunction.Arn}/invocations
        ResourceId: !Ref RidesCollection
        RestApiId: !Ref RideSharingApi

    ReadMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadRideFunction.Arn}/invocations
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    UpdateMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/update
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRideFunction.Arn}/invocations
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    DeleteMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/delete
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId: !Ref Guard
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRideFunction.Arn}/invocations
        ResourceId: !Ref Ride
        RestApiId: !Ref RideSharingApi

    Deployment:
      DependsOn:
        - CreateMethod
        - ListMethod
        - Guard
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref RideSharingApi
        StageName: prod
