AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    rides-api

    SAM Template for rides-api

Globals:
    Function:
        Timeout: 3


Resources:

    CreateRideFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: ride_sharing/
        Handler: create.lambdaHandler
        Runtime: nodejs8.10
        Events:
          CreateRide:
              Type: Api
              Properties:
                  Path: /rides
                  Method: post
                  RestApiId: !Ref RideSharingApi
        Policies:
          DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
        Environment:
          Variables:
            TABLE_NAME: !Ref RidesTable

    ListRidesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: list.lambdaHandler
            Runtime: nodejs8.10
            Events:
                ListRides:
                    Type: Api
                    Properties:
                        Path: /rides
                        Method: get
                        RestApiId: !Ref RideSharingApi
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    ReadRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: read.lambdaHandler
            Runtime: nodejs8.10
            Events:
                ReadRide:
                    Type: Api
                    Properties:
                        Path: /rides/{rideID}
                        Method: get
                        RestApiId: !Ref RideSharingApi
            Policies:
              DynamoDBReadPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable


    UpdateRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: update.lambdaHandler
            Runtime: nodejs8.10
            Events:
                UpdateRide:
                    Type: Api
                    Properties:
                        Path: /rides/{rideID}
                        Method: put
                        RestApiId: !Ref RideSharingApi
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable


    DeleteRideFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ride_sharing/
            Handler: delete.lambdaHandler
            Runtime: nodejs8.10
            Events:
                DeleteRide:
                    Type: Api
                    Properties:
                        Path: /rides/{rideID}
                        Method: delete
                        RestApiId: !Ref RideSharingApi
            Policies:
              DynamoDBCrudPolicy:
                TableName: !Ref RidesTable
            Environment:
              Variables:
                TABLE_NAME: !Ref RidesTable

    RidesTable:
        Type: AWS::Serverless::SimpleTable

    RideSharingApi:
        Type: AWS::Serverless::Api
        Properties:
          StageName: prod
          # Auth:
          #   DefaultAuthorizer: AuthZr
          #   Authorizers:
          #     AuthZr:
          #       UserPoolArn: !GetAtt UserPool.Arn
          # MethodSettings:
          #   - HttpMethod: GET
          #     ResourcePath: /~1rides
          #     ThrottlingBurstLimit: 20
          DefinitionBody:
            swagger: 2.0
            info:
              title: Ride sharing API
              version: 0.0.1
            paths:
              /rides:
                get:
                  responses:
                    '200':
                      description: A JSON array of rides
                  x-amazon-apigateway-integration:
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListRidesFunction.Arn}/invocations
                    httpMethod: POST
                    type: aws_proxy
                post:
                  responses:
                    '201':
                      description: ride created
                  x-amazon-apigateway-integration:
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRideFunction.Arn}/invocations
                    httpMethod: POST
                    type: aws_proxy
              /rides/{rideID}:
                get:
                  responses:
                    '200':
                      description: Ride details
                  x-amazon-apigateway-integration:
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadRideFunction.Arn}/invocations
                    httpMethod: POST
                    type: aws_proxy
                put:
                  responses:
                    '200':
                      description: Update ride
                  x-amazon-apigateway-integration:
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRideFunction.Arn}/invocations
                    httpMethod: POST
                    type: aws_proxy
                delete:
                  responses:
                    '200':
                      description: Delete ride
                  x-amazon-apigateway-integration:
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRideFunction.Arn}/invocations
                    httpMethod: POST
                    type: aws_proxy
                parameters:
                  - in: path
                    name: rideID
                    required: true
            # 'Fn::Transform':
            #   Name: 'AWS::Include'
            #   Parameters:
            #     Location: ./openapi.yaml

    ApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ride-sharing
        Enabled: true
        StageKeys:
          - RestApiId: !Ref RideSharingApi
            StageName: prod

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: riders

    TestClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: test-client
        GenerateSecret: true
        UserPoolId: !Ref UserPool

    Authorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Type: COGNITO_USER_POOLS
        RestApiId: !Ref RideSharingApi
        ProviderARNs:
          - !GetAtt UserPool.Arn
        Name: AuthZr
        IdentitySource: method.request.header.Authorization

    Create:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: true
        AuthorizationScopes:
          - rides/create
        AuthorizationType: CUSTOM
        AuthorizerId: !Ref Authorizer
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRideFunction.Arn}/invocations
        ResourceId:
          !GetAtt
            - RideSharingApi
              RootResourceId
        RestApiId: !Ref RideSharingApi
